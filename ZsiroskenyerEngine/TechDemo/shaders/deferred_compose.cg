sampler2D gBuffer0 : register(s0);
sampler2D gBuffer1 : register(s1);
sampler2D gBuffer2 : register(s2);
sampler2D depthBuffer : register(s3);

float4x4 invViewProj : register(c0);
float4x4 projMat : register(c4);
float4 camPos : register(c8);


struct VS_IN {
	float3 posL 	: POSITION;
	float2 tex0 	: TEXCOORD0;
};

struct VS_OUT {
	float4 posH 	: SV_POSITION;
	float2 tex0 	: TEXCOORD2;
};

struct PS_OUT {
	float4 color: COLOR0;
};

float3 depthToWorldSpace(float depth, float2 texCoord)
{
	// World space pos from depth
	float4 posH = float4(texCoord.x * 2 - 1, (1 - texCoord.y) * 2 - 1, depth, 1.0f); // NDC space
	float4 posW = mul(posH, invViewProj);
	posW /= posW.w;
	return posW.xyz;
}

float3 GetPosition(float2 texCoord)
{
	return depthToWorldSpace(tex2D(depthBuffer, texCoord).r, texCoord);
}

float3 GetNormal(float2 texCoord)
{
	float2 packedNormal = tex2D(gBuffer1, texCoord);
	float3 normal;
	normal.x = packedNormal.r;
	normal.y = 2.0f*(packedNormal.g>0.0f ? packedNormal.g-0.5f:packedNormal.g+0.5f);
	normal.z = sqrt(clamp(1.0f - normal.x*normal.x - normal.y*normal.y, 0, 1)) * (packedNormal.g>0.0f ? 1.0f:-1.0f);
	return normal;
}


//PER_PIXEL SSAO összetevõ számolás
float doAmbientOcclusion(in float2 texcoord,in float2 delta_uv, in float3 pos1, in float3 norm1)
{
 float3 pos2 = GetPosition(texcoord + delta_uv);

 //HALO eltüntetése (próbálkozás) sajna csak pár helyzetben nagyon jó
 if(distance(pos1,pos2) > 5)
 	return 0.8f;

 float3 diff = pos2 - pos1;
 float3 dir = normalize(diff);

 float SSAObias = 0.0f;
 return 1.0f -  clamp(dot(dir,norm1),0.1f,1.0f);
// return 1.0f -  clamp(dot(dir,norm1),-0.1f,1.0f);
}

//THE SSAO PROCESS FOR THE PIXEL
float ambientocclusionprocess(float2 projtex)
{
  float SSAOraylength = 5.000150f;
  float SSAOiterations = 2;

	// Try depth independency, but not expected result TODO...
	float4 vsDeltaCoord  = float4(SSAOraylength, distance(camPos, depthToWorldSpace(tex2D(depthBuffer, projtex).r, projtex)), 0, 1);

  // Transform that to proj space, then divide, transform x,y to texture space,  now ssao will be depth independent
  float4 deltaCoord = mul(vsDeltaCoord, projMat);

  float SMAP_DX = (deltaCoord.x + 1) /  2 / 800; // MAGICS, TODO
  float SMAP_DY = SMAP_DX;

//Ambient Gyüjtés folyamat kezdete 0
 float ao = 0.0f;
                                                   //  . .
//Kiindulási pixel, normalja,pozíciója, és majd ezek körül mászkálunk négyzetekben..     . <- kiindulási pont
 float3 refpos = GetPosition(projtex);
 float3 refnorm = GetNormal(projtex);

 float SSAORadius = 2.0f;
 for (int j = 1; j <= SSAOiterations; ++j)
 {
   //8 körül levõ ponton mintavétel
   //kezdés bal felsõ sarok órajárás irányban..
   float2 coord1 = float2(-SMAP_DX,-SMAP_DY)*j * SSAORadius;
   float2 coord2 = float2(0       ,-SMAP_DY)*j * SSAORadius;
   float2 coord3 = float2(SMAP_DX ,-SMAP_DY)*j * SSAORadius;
   float2 coord4 = float2(SMAP_DX ,0       )*j * SSAORadius;
   float2 coord5 = float2(SMAP_DX ,SMAP_DY )*j * SSAORadius;
   float2 coord6 = float2(0       ,SMAP_DY )*j * SSAORadius;
   float2 coord7 = float2(-SMAP_DX,SMAP_DY )*j * SSAORadius;
   float2 coord8 = float2(-SMAP_DX,0       )*j * SSAORadius;


   ao+= doAmbientOcclusion(projtex,coord1,refpos,refnorm);
   ao+= doAmbientOcclusion(projtex,coord2,refpos,refnorm);
   ao+= doAmbientOcclusion(projtex,coord3,refpos,refnorm);
   ao+= doAmbientOcclusion(projtex,coord4,refpos,refnorm);
   ao+= doAmbientOcclusion(projtex,coord5,refpos,refnorm);
   ao+= doAmbientOcclusion(projtex,coord6,refpos,refnorm);
   ao+= doAmbientOcclusion(projtex,coord7,refpos,refnorm);
   ao+= doAmbientOcclusion(projtex,coord8,refpos,refnorm);


 } 
float SSAOintensity = 1.5f;
  return (1.0f - (ao/SSAOiterations/8))*(SSAOintensity);
}

float Directionallight(float3 dir, float3 norm, float3 posW,float specexponent, float specularIntensity, float diffuseIntensity)
{
	float4 result = float4(0,0,0,0);
	//Dir Light (Fotonok szinte párhuzamosak.. (SUN))
	float3 lightvec = -normalize(dir);


	//LAMBERT'S COSINE LAW
	float difflight = saturate(dot(lightvec,norm));

	//CALC SPEC LIGHT IF DIFFLIGHT IS WORK
	float speclight = 0.0f;
	
	result = difflight * diffuseIntensity;

	/*
	if(specexponent >= 1.0f)
	{
		float3 eyeVec = normalize(posW - campos);
		float3 reflectedVec = reflect(eyeVec,norm);
		float4 reflectColor = reflection_map.Sample(sampler1,reflectedVec)*(specexponent-1.0f);
		if(shadowfactor == 0.0f)
			reflectColor*=0.5f;
		result += reflectColor;
	}*/

	if(difflight > 0.0f)
	{	
		float3 viewvec = normalize( camPos - posW );
		float3 halfvec = normalize( lightvec + viewvec );
	  	speclight =  pow(saturate(dot(norm,halfvec)),pow(specexponent,2)*200) * specularIntensity;
		result+= speclight;	
	}

	return result;	
	
}

VS_OUT VS_MAIN(VS_IN In, uint VertexID : VERTEXID) {
	VS_OUT vout;
	vout.tex0 = float2( (VertexID << 1) & 2, VertexID & 2 );
	vout.posH = float4(  vout.tex0 * float2( 2.0f, -2.0f ) + float2( -1.0f, 1.0f), 0.0f, 1.0f );
	return vout;
}

PS_OUT PS_MAIN(VS_OUT In) {
	PS_OUT Out;

	// World space Position and Normal
	float3 posW = depthToWorldSpace(tex2D(depthBuffer , In.tex0).r, In.tex0);
	float3 normal = GetNormal(In.tex0);

	
	// DEBUG INCOMING NORMALS!
	/*
	float lightness = Out.color.r*0.27+Out.color.g*0.67+Out.color.b*0.06;
	float4 lightnessColor = float4(float3(lightness, lightness, lightness)*0.4f, 0.f);
	Out.color = float4(normal+float3(1,1,1)*0.5, 1.f);
	Out.color = float4(normal*0.5+float3(0.5,0.5,0.5), 1);

	float4 dbgNormal = tex2D(gBuffer2, In.tex0);
	if (In.tex0.x>0.5)
		Out.color = dbgNormal;
	if (In.tex0.x>0.498 && In.tex0.x<0.502)
		Out.color = float4(0,0,0,1);
	*/
	
	// Not so plausible term using, FUCK YOU, need some new shits, to work good
	float lighting = Directionallight(float3(1,0,-1), normal, posW, 0.3f, 0.4f, 0.4f);
	float ao = 1 - ambientocclusionprocess(In.tex0);
	//Out.color = ao;
	//return Out;
	float ambient = 0.6f;
	float4 diffuseColor = tex2D(gBuffer0, In.tex0);
		Out.color = diffuseColor * lighting + diffuseColor * ao * ambient;
	return Out;
}