sampler2D textureInput : register(s0) = {
    MipFilter = POINT,
    MinFilter = POINT,
    MagFilter = POINT,
	AddressU = Clamp,
	AddressW = Clamp,
};
float logAvgLum : register(c0);

struct VS_IN {
	float3 posL 	: POSITION;
	float2 tex0 	: TEXCOORD0;
};

struct VS_OUT {
	float4 posH 	: SV_POSITION;
	float2 tex0 	: TEXCOORD2;
};

VS_OUT VS_MAIN(VS_IN In, uint VertexID : VERTEXID) {
	VS_OUT Out;
	Out.tex0 = float2( (VertexID << 1) & 2, VertexID & 2 );
	Out.posH = float4(  Out.tex0 * float2( 2.0f, -2.0f ) + float2( -1.0f, 1.0f), 0.0f, 1.0f );
	return Out;
}

float4 PS_MAIN(VS_OUT In) : COLOR0 {
	float4 color = tex2D(textureInput, In.tex0);
	float pixelLum = color.r*0.27 + color.g*0.67 + color.b*0.06;
	float absAvgLum = pow(10.0f, logAvgLum);
	// clamping for 50/50: 1/505.0=1.998e-3 & 1.998
	// clamping for 33/66: 3/1002=2.994012e-4 & 2.994012
	float a = absAvgLum*2.994012e-3f;
	float b = absAvgLum*2.994012f;
	float lumMultiplier = ((pixelLum-a)/(b-a));
	color = color/pixelLum * lumMultiplier;
	// get blueshift amount: interpol between 1e-2 and 1
	float blueShift = 1.0f-clamp((logAvgLum+2.0f)/(2.0f), 0.0f, 1.0f);
	color.rgb = (1.0f-blueShift)*color.rgb + blueShift*float3(0.2, 0.3, 0.4)*lumMultiplier;
	
	return color;
}