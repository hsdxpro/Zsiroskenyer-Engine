sampler2D textureInput : register(s0) = {
    MipFilter = POINT,
    MinFilter = POINT,
    MagFilter = POINT,
	AddressU = Clamp,
	AddressW = Clamp,
};
struct {
	float logAvgLum;
	float blueShift;
} constants : register(c0);

struct VS_IN {
	float3 posL 	: POSITION;
	float2 tex0 	: TEXCOORD0;
};

struct VS_OUT {
	float4 posH 	: SV_POSITION;
	float2 tex0 	: TEXCOORD2;
};

VS_OUT VS_MAIN(VS_IN In, uint VertexID : VERTEXID) {
	VS_OUT Out;
	Out.tex0 = float2( (VertexID << 1) & 2, VertexID & 2 );
	Out.posH = float4(  Out.tex0 * float2( 2.0f, -2.0f ) + float2( -1.0f, 1.0f), 0.0f, 1.0f );
	return Out;
}


float3 toXyz(float3 arg) {
	return mul(
		float3x3(0.4124564, 0.3575761, 0.1804375, 
				 0.2126729, 0.7151522, 0.0721750,
				 0.0193339, 0.1191920, 0.9503041),
		arg
	);
}

float4 PS_MAIN(VS_OUT In) : COLOR0 {
	float4 color = tex2D(textureInput, In.tex0);
	float logAvgLum = constants.logAvgLum;
	float pixelLum = color.r*0.2126 + color.g*0.7152 + color.b*0.0722;
	float absAvgLum = pow(10.0f, logAvgLum);
	// clamping for 50/50: 1/505.0=1.998e-3 & 1.998
	// clamping for 33/66: 3/1002=2.994012e-4 & 2.994012
	float magic = 1.998f;
	float a = absAvgLum*magic*1e-3f;
	float b = absAvgLum*magic;
	float t = ((pixelLum-a)/(b-a));
	// apply blueshift
	float3 colorXyz = toXyz(color.rgb);
	float scotopicLum = colorXyz.y*(1.33*(1+(colorXyz.y+colorXyz.z)/colorXyz.x)-1.68);
	float blueShift = constants.blueShift;
	color.rgb = (1.0f-blueShift)*color.rgb + blueShift*0.1*float3(1.05f, 0.97f, 1.27f)*scotopicLum;
	
	color = color/pixelLum * t;

	/*
	if (In.tex0.x>0.5) {
		color.rgb; // = float3(In.tex0.y, In.tex0.y, In.tex0.y);
	}
	else {
		//float c = pow(In.tex0.y, 2.2);
		//color.rgb = float3(c,c,c);
		color.rgb = pow(color.rgb, 2.2);
	}
	*/
		
	
	return color;
}



