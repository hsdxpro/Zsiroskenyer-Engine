////////////////////////////////////////////////////////////////////////////////
//	Lighting shader for POINT lights
//
////////////////////////////////////////////////////////////////////////////////

#include "deferred_lightpass_cmn.cginc"


//------------------------------------------------------------------------------
//	Vertex shader
//------------------------------------------------------------------------------

struct VS_IN {
	float4 posL 	: POSITION;
	float4 misc 	: COLOR0;
};
struct VS_OUT {
	float4 posH 	: POSITION;
	float2 tex0 	: TEXCOORD2;
};

VS_OUT VS_MAIN(VS_IN In, uint VertexID : VERTEXID) {
/*
	VS_OUT Output;
	// scale vertices up to range
	//Output.posH = In.posL*lightRange*2.f; // sphere radius is like 0.54m, scale by 2.0
		
	Output.posH.w = 1;
	// add light position to verts
	//Output.posH += float4(lightPos, 0.f);
	// add view and proj transformation
	Output.posH = mul(Output.posH, viewProj);
	
	Output.tex0 = Output.posH.xy * 0.5f + float2(0.5f, 0.5f);
*/
	VS_OUT vout;	
	vout.tex0 = float2( (VertexID << 1) & 2, VertexID & 2 );
	vout.posH = In.posL;
	return vout;
	
	// return
	//return Output;
}

//------------------------------------------------------------------------------
//	Helper functions
//------------------------------------------------------------------------------


float LightAttenuation() {
	return 1.f;
}


//------------------------------------------------------------------------------
//	Pixel shader
//------------------------------------------------------------------------------
float4 PS_MAIN(VS_OUT In) : COLOR0 {
	float4 color;
	float3 normal;
	float3 worldPos;
	float3 diffuseColor;
	float depth;
	DecodeGBuffer(In.tex0, diffuseColor, normal, worldPos, depth);
	
	// calculate lighting terms
	float3 diffuseTerm = DiffuseLight(lightDir, lightColor, normal);
	float3 specTerm = SpecularLight(lightDir, lightColor, normal, normalize(worldPos-camPos), 0.2f);

	color.rgb += diffuseTerm*diffuseColor + specTerm; // note: no light attenuation
	color.rgb *= LightAttenuation();

	color.a = 1.f;
	
	color.rgb = (0.5f, 0.5f, 0.5f);
	return color;
}