#include "tone_mapping.cginc"


// texture input sampler
sampler2D textureInput = {
    	MipFilter = LINEAR,
    	MinFilter = LINEAR,
    	MagFilter = LINEAR,
	AddressU = CLAMP,
	AddressV = CLAMP,
};

// constant buffers
float avgLum : register(c0);

// in/out structures
struct VS_IN {
	float3 posL 	: POSITION;
	float2 tex0 	: TEXCOORD0;
};

struct VS_OUT {
	float4 posH 	: SV_POSITION;
	float2 tex0 	: TEXCOORD2;
};

// vertex shader
VS_OUT VS_MAIN(VS_IN In, uint VertexID : VERTEXID) {
	VS_OUT Out;
	Out.tex0 = float2( (VertexID << 1) & 2, VertexID & 2 );
	Out.posH = float4(  Out.tex0 * float2( 2.0f, -2.0f ) + float2( -1.0f, 1.0f), 0.0f, 1.0f );
	return Out;
}

// pixel shader
float4 PS_MAIN(VS_OUT In) : COLOR0 {
	float4 color = tex2D(textureInput, In.tex0);

	color.rgb = LensEffect(color.rgb, avgLum);

	return color;
}

technique t
{
	pass p
	{
		VertexProgram = compile vs_4_0 VS_MAIN();
		FragmentProgram = compile ps_4_0 PS_MAIN();
	}
}