////////////////////////////////////////////////////////////////////////////////
//	Lighting shader for ambient lights
//
////////////////////////////////////////////////////////////////////////////////

#include "deferred_lightpass_cmn.cginc"

//------------------------------------------------------------------------------
//	Additional textures
//------------------------------------------------------------------------------

sampler2D ambientOcclusionTexture = {
    MipFilter = LINEAR,
    MinFilter = LINEAR,
    MagFilter = LINEAR,
};


//------------------------------------------------------------------------------
//	Vertex shader
//------------------------------------------------------------------------------

struct VS_IN {
	float3 posL 	: POSITION;
	float2 tex0 	: TEXCOORD0;
};
struct VS_OUT {
	float4 posH 	: POSITION;
	float2 tex0 	: TEXCOORD2;
};

VS_OUT VS_MAIN(VS_IN In, uint VertexID : VERTEXID) {
	VS_OUT vout;
	vout.tex0 = float2( (VertexID << 1) & 2, VertexID & 2 );
	vout.posH = float4(  vout.tex0 * float2( 2.0f, -2.0f ) + float2( -1.0f, 1.0f), 0.0f, 1.0f );
	return vout;
}


//------------------------------------------------------------------------------
//	Pixel shader
//------------------------------------------------------------------------------
float4 PS_MAIN(VS_OUT In) : COLOR0 {
	float4 color;
	float3 diffuseColor;

	diffuseColor = tex2D(gBuffer0, In.tex0).rgb;

	float ambientOcclusion = tex2D(ambientOcclusionTexture, In.tex0).r;
	return float4(ambientOcclusion, 0.0f, 0.0f, 1.0f);

	color.rgb = diffuseColor * lightColor * ambientOcclusion;
	color.a = 1.0f;
	
	return color;
}

technique t
{
	pass p
	{
		VertexProgram = compile vs_4_0 VS_MAIN();
		FragmentProgram = compile ps_4_0 PS_MAIN();
	}
}