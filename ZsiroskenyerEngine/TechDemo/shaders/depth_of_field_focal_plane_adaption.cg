#include "common.cginc"

sampler2D depthTexture = {
	MipFilter = POINT,
    MinFilter = POINT,
    MagFilter = POINT,
	AddressU = CLAMP,
	AddressV = CLAMP,
};

sampler2D inputFocalPlaneTex = {
	MipFilter = POINT,
	MinFilter = POINT,
	MagFilter = POINT,
	AddressU = CLAMP,
	AddressV = CLAMP,
};

struct {
	float4x4 invViewProj;
	float3	 camPos;
	float	 frameDeltaTime;
	float	 minFocalDist;   // The nearest focal plane (distance), that the eye can focus into
	float	 maxFocalDist;   // The farest focal plane,(distance) that the eye can focus into
	float	 focalAdaptSpeed; //
} c : register(c0);		



struct VS_IN {
	float3 posL 	: POSITION;
	float2 tex0 	: TEXCOORD0;
};

struct VS_OUT {
	float4 posH		: POSITION;
	float2 tex0		: TEXCOORD0;
	float3 viewRay	: TEXCOORD1;
};


VS_OUT VS_MAIN(VS_IN In, uint VertexID : VERTEXID) {
	VS_OUT Out;
	Out.tex0 = float2( (VertexID << 1) & 2, VertexID & 2 );
	Out.posH = float4(  Out.tex0 * float2( 2.0f, -2.0f ) + float2( -1.0f, 1.0f), 0.0f, 1.0f );

	float4 viewRay =	Out.posH.x * c.invViewProj[0] + (
						Out.posH.y * c.invViewProj[1] + (
						c.invViewProj[2] +
						c.invViewProj[3]));

	Out.viewRay = viewRay.xyz * (1.0f / viewRay.w);
	Out.viewRay -= c.camPos;

	return Out;
}

float PS_MAIN(VS_OUT In) : COLOR0 {
	// We adapt slowly to that
    float destFocalDist = clamp(distance(c.camPos, GetWorldPosition(c.camPos, In.viewRay, tex2D(depthTexture, In.tex0))), c.minFocalDist, c.maxFocalDist);

	// The last result of adaption
	float currFocalDist = tex2D(inputFocalPlaneTex, float2(0.5f, 0.5f)).r;

	return (destFocalDist - currFocalDist) * c.frameDeltaTime * c.focalAdaptSpeed + currFocalDist; // So slow adaption...	
}

technique t
{
	pass p
	{
		VertexProgram = compile vs_4_0 VS_MAIN();
		FragmentProgram = compile ps_4_0 PS_MAIN();
	}
}